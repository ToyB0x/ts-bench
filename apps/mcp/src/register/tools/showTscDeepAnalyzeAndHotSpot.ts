import { execSync } from "node:child_process";
import * as fs from "node:fs/promises";
import * as path from "node:path";
import type { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";

export const MCP_TOOL_NAME__SHOW_TSC_DEEP_ANALYZE_AND_HOT_SPOT =
  "show-tsc-deep-analyze-and-hot-spot";

const DEFAULT_SKIP_MILLIS = 100; // DEFAULT: 100
const DEFAULT_FORCE_MILLIS = 150; // DEFAULT: 500
const MAX_OLD_SPACE_SIZE = 16384; // 16GB, adjust as needed (bigger and bad ts files, more memory needed)
const TEMP_TRACE_FILES_DIR = "tmp-trace";

export const showTscDeepAnalyzeAndHotSpot = (server: McpServer) => {
  server.registerTool(
    MCP_TOOL_NAME__SHOW_TSC_DEEP_ANALYZE_AND_HOT_SPOT,
    {
      title: "Show TypeScript Deep Analyze and Hot Spot",
      description: `
Show TypeScript deep analyze and hot spot for a single package. 
This tool runs \`npx tsc --noEmit --extendedDiagnostics --incremental false --generateTrace tempDir\` to analyze TypeScript performance and issues, 
and then runs \`npx @typescript/analyze-trace tempDir\` to analyze the trace file generated by TypeScript.

This is very useful for identifying bottlenecks and hotspots in TSC and for effective debugging and tuning.
`,
      inputSchema: {
        targetDir: z
          .string()
          .default(".")
          .describe(
            "Target directory to run TypeScript diagnostics in. Defaults to the current directory. (specify the package directory if you want to analyze a specific package in a monorepo)",
          ),
        skipMillis: z
          .number()
          .default(DEFAULT_SKIP_MILLIS)
          .describe(
            `Skip milliseconds for the analysis. Defaults to ${DEFAULT_SKIP_MILLIS}.`,
          ),
        forceMillis: z
          .number()
          .default(DEFAULT_FORCE_MILLIS)
          .describe(
            `Force milliseconds for the analysis. Defaults to ${DEFAULT_FORCE_MILLIS}.`,
          ),
      },
    },
    async ({ targetDir, skipMillis, forceMillis }) => {
      const tempDir = path.join(targetDir, TEMP_TRACE_FILES_DIR);
      
      try {
        // Create temp directory
        await fs.mkdir(tempDir, { recursive: true });
        
        const commandGenerateTrace = `NODE_OPTIONS=--max-old-space-size=${MAX_OLD_SPACE_SIZE} npx tsc --noEmit --extendedDiagnostics --incremental false --generateTrace ${TEMP_TRACE_FILES_DIR}`;
        const commandAnalyze = `npx @typescript/analyze-trace ${TEMP_TRACE_FILES_DIR} --skipMillis ${skipMillis} --forceMillis ${forceMillis}`;

        // execute tsc with trace generation
        execSync(commandGenerateTrace, { cwd: targetDir });
        const result = execSync(commandAnalyze, {
          cwd: targetDir,
        });
        return {
          content: [{ type: "text", text: result.toString() }],
        };
      } catch (error) {
        return {
          content: [
            { type: "text", text: `Error executing command: ${error}` },
          ],
        };
      } finally {
        // Clean up temp files
        await fs.rm(tempDir, { recursive: true, force: true });
      }
    },
  );
};
